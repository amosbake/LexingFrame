package com.lexing.common.assist;

/**
 * Created by Ray on 2015/4/8 0008.
 */

import android.content.Context;
import android.content.SharedPreferences;
import android.telephony.TelephonyManager;

import java.io.UnsupportedEncodingException;
import java.util.UUID;

/**
 * UUID工厂
 */
public class DeviceUuidFactory {
    public static final int FROM_DEVICE_ID = 100;
    public static final int FROM_ANDROID_ID = 200;
    public static final int FROM_SERIAL = 300;
    protected static final String PREFS_FILE = "device_id.xml";
    protected static final String PREFS_DEVICE_ID = "device_id";

    protected static String uuid;

    /**
     * Returns a unique UUID for the current android device.  As with all UUIDs, this unique ID is "very highly likely"
     * to be unique across all Android devices.  Much more so than ANDROID_ID is.
     * <p/>
     * The UUID is generated by using ANDROID_ID as the base key if appropriate, falling back on
     * TelephonyManager.getDeviceID() if ANDROID_ID is known to be incorrect, and finally falling back
     * on a random UUID that's persisted to SharedPreferences if getDeviceID() does not return a
     * usable value.
     * <p/>
     * In some rare circumstances, this ID may change.  In particular, if the device is factory reset a new device ID
     * may be generated.  In addition, if a user upgrades their phone from certain buggy implementations of Android 2.2
     * to a newer, non-buggy version of Android, the device ID may change.  Or, if a user uninstalls your app on
     * a device that has neither a proper Android ID nor a Device ID, this ID may change on reinstallation.
     * <p/>
     * Note that if the code falls back on using TelephonyManager.getDeviceId(), the resulting ID will NOT
     * change after a factory reset.  Something to be aware of.
     * <p/>
     * Works around a bug in Android 2.2 for many devices when using ANDROID_ID directly.
     *
     * @return a UUID that may be used to uniquely identify your device for most purposes.
     */
    synchronized public static String getDeviceUuid(Context cxt) {
        if (uuid == null) {
            final SharedPreferences prefs = cxt.getSharedPreferences(PREFS_FILE, 0);
            final String id = prefs.getString(PREFS_DEVICE_ID, null);

            if (id != null) {
                // Use the ids previously computed and stored in the prefs file
                uuid = UUID.fromString(id).toString();
            } else {
//                String androidId;
                String deviceId;
//                String serial;
//                androidId = Settings.Secure.getString(cxt.getContentResolver(), Settings.Secure.ANDROID_ID);
//                LogUtil.d("androidId: " + androidId);
                TelephonyManager tm = (TelephonyManager)cxt.getSystemService(Context.TELEPHONY_SERVICE);
                deviceId = tm.getDeviceId();
                L.d("deviceId: " + deviceId);
//                serial = tm.getSimSerialNumber();
//                LogUtil.d("serial: " + serial);
                // Use the Android ID unless it's broken, in which case fallback on deviceId,
                // unless it's not available, then fallback on a random number which we store
                // to a prefs file
                try {
//                    if (!(("9774d56d682e549c".equals(androidId)||"androidId".equals(androidId))
//                            &&"deviceId".equals(deviceId)&&"serial".equals(serial))) {
                        uuid = UUID.nameUUIDFromBytes((deviceId).getBytes("utf8")).toString();
//                    } else {
//                        uuid = UUID.randomUUID().toString();
//                    }
                } catch (UnsupportedEncodingException e) {
                    throw new RuntimeException(e);
                }

                // Write the value out to the prefs file
                prefs.edit().putString(PREFS_DEVICE_ID, uuid).apply();
            }
        }
        return uuid;
    }
}